#include "WiFi.h"
#include "WiFiUdp.h"
#include "BLEDevice.h"
#include "BLEServer.h"
#include "BLEUtils.h"
#include "BluetoothSerial.h"
#include "BLEScan.h"
#include "BLEAdvertisedDevice.h"
#include "BLEEddystoneURL.h"
#include "BLEAddress.h"
// WiFi network name and password:
const char * networkName = "Scheidt & Bachmann";
const char * networkPswd = "pswd";
//IP address to send UDP data to:
//const char * udpAddress = udp;
const char * udpAddress = udp2;
const int udpPort = 5015;
boolean connected = false;
BLEScan* pBLEScan;
static BLEAddress *pServerAddress;
BLEClient*  pClient;
int scanTime = 3; //In seconds
uint16_t beconUUID = 0xFEAA;
WiFiUDP udp;
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  public:
    void onResult(BLEAdvertisedDevice advertisedDevice) {
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      std::string strServiceData = advertisedDevice.getServiceData();
      uint8_t cServiceData[100];
      strServiceData.copy((char *)cServiceData, strServiceData.length(), 0);
      if (advertisedDevice.getServiceDataUUID().equals(BLEUUID(beconUUID)) == true) { // found Eddystone UUID
        if (cServiceData[0] == 0x10) {
          BLEEddystoneURL oBeacon = BLEEddystoneURL();
          oBeacon.setData(strServiceData);
          char *s = new char[100];
          //send to udp
          delay(1);
          strcpy(s, "{\"URL\":\"");
          strcat(s, oBeacon.getDecodedURL().c_str());
          strcat(s, "\",\"RSSI\":");
          strcat(s, String(advertisedDevice.getRSSI()).c_str());
          strcat(s, ",\"Mac\":\"");
          strcat(s, pServerAddress->toString().c_str());
          strcat(s, "\",\"IP\":\"");
          strcat(s, WiFi.localIP().toString().c_str());
          strcat(s, "\"}");
          udp.beginPacket(udpAddress, udpPort);
          udp.print(s);
          Serial.print(s);
          udp.endPacket();
          delay(1);

        }

        else {

          Serial.printf("no eddystone-url found");

        }
        Serial.printf("\n");
      }
    }
};

void setup() {
  Serial.begin(115200);

  Serial.printf("start ESP32 \n");
  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan(); //create new scan
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true); //active scan uses more power, but get results faster
  connectToWiFi(networkName, networkPswd);

}

void loop() {
  delay(1);
  BLEScanResults FoundDevices = pBLEScan->start(scanTime);
  delay(1);
}
void connectToWiFi(const char * ssid, const char * pwd) {
  Serial.println("Connecting to WiFi network: " + String(ssid));

  // delete old config
  WiFi.disconnect(true);
  //register event handler
  WiFi.onEvent(WiFiEvent);

  //Initiate connection
  WiFi.begin(ssid, pwd);

  Serial.println("Waiting for WIFI connection...");
}

//wifi event handler
void WiFiEvent(WiFiEvent_t event) {
  switch (event) {
    case SYSTEM_EVENT_STA_GOT_IP:
      //When connected set
      Serial.print("WiFi connected! IP address: ");
      Serial.println(WiFi.localIP());
      connected = true;
      break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
      Serial.println("WiFi lost connection");
      connected = false;
      break;
  }
}
